{"version":3,"sources":["img/barathraj.jpg","components/pages/Home.js","components/pages/About.js","components/layout/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","className","role","aria-label","href","src","img","alt","About","Navbar","to","type","data-toggle","data-target","aria-controls","aria-expanded","id","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,uC,mLCqD5BC,EAlDF,WACX,OACE,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,YACb,gCACE,wBAAIA,UAAU,mBAAd,QACQ,IACN,0BAAMC,KAAK,MAAMC,aAAW,OAA5B,iBAGI,IACN,wDACA,qDAGJ,6BACA,yBAAKF,UAAU,WACb,sCACA,yBAAKA,UAAU,UACb,yBAAKA,UAAU,eACb,uBAAGG,KAAK,iCACN,uBAAGH,UAAU,oBAGjB,yBAAKA,UAAU,eACb,uBAAGG,KAAK,sCACN,uBAAGH,UAAU,sBAGjB,yBAAKA,UAAU,eACb,uBAAGG,KAAK,mCACN,uBAAGH,UAAU,6BAGjB,yBAAKA,UAAU,eACb,uBAAGG,KAAK,kCACN,uBAAGH,UAAU,+BAMvB,yBAAKA,UAAU,UACb,yBAAKI,IAAKC,IAAKC,IAAI,iBCjCZC,EAZD,WACZ,OACE,6BACE,yBAAKP,UAAU,mBACb,gCACE,wBAAIA,UAAU,mBAAd,8B,OCkCKQ,EAtCA,WACb,OACE,6BACE,yBAAKR,UAAU,8CACb,kBAAC,IAAD,CAAMA,UAAU,eAAeS,GAAG,KAAlC,uBAGA,4BACET,UAAU,iBACVU,KAAK,SACLC,cAAY,WACZC,cAAY,0BACZC,gBAAc,yBACdC,gBAAc,QACdZ,aAAW,qBAEX,0BAAMF,UAAU,iBAGlB,yBAAKA,UAAU,2BAA2Be,GAAG,0BAC3C,wBAAIf,UAAU,sBACZ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWS,GAAG,KAA9B,QACO,0BAAMT,UAAU,WAAhB,eAGT,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWS,GAAG,UAA9B,e,2CCDCO,MAdf,WACE,OACE,yBAAKhB,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,IAAIC,UAAWpB,IACjC,kBAAC,IAAD,CAAOmB,KAAK,SAASC,UAAWZ,QCVtBa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2bf8e2f8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/barathraj.7b652d8a.jpg\";","import React from 'react';\nimport img from '../../img/barathraj.jpg';\n\nconst Home = () => {\n  return (\n    <div className='section-home'>\n      <div className='sec-left'>\n        <div className='wel-text'>\n          <header>\n            <h3 className='heading-primary'>\n              Hello{' '}\n              <span role='img' aria-label='img'>\n                ðŸ‘‹\n              </span>\n            </h3>{' '}\n            <h1>I am Barathraj Devarajan</h1>\n            <h3>Front End Developer</h3>\n          </header>\n        </div>\n        <br />\n        <div className='contact'>\n          <p>Contact</p>\n          <div className='social'>\n            <div className='social-icon'>\n              <a href='https://github.com/barathrajd'>\n                <i className='fab fa-github' />\n              </a>\n            </div>\n            <div className='social-icon'>\n              <a href='https://linkedin.com/in/barathrajd'>\n                <i className='fab fa-linkedin' />\n              </a>\n            </div>\n            <div className='social-icon'>\n              <a href='https://facebook.com/barathrajd'>\n                <i className='fab fa-facebook-square' />\n              </a>\n            </div>\n            <div className='social-icon'>\n              <a href='https://twitter.com/barathrajd'>\n                <i className='fab fa-twitter-square' />\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className='avatar'>\n        <img src={img} alt='Barathraj' />\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\n\nconst About = () => {\n  return (\n    <div>\n      <div className='container-fluid'>\n        <header>\n          <h1 className='heading-primary'>Hello there from About</h1>\n        </header>\n      </div>\n    </div>\n  );\n};\n\nexport default About;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Navbar = () => {\n  return (\n    <div>\n      <nav className='navbar navbar-expand-lg navbar-dark bgdark'>\n        <Link className='navbar-brand' to='/'>\n          Barathraj Devarajan\n        </Link>\n        <button\n          className='navbar-toggler'\n          type='button'\n          data-toggle='collapse'\n          data-target='#navbarSupportedContent'\n          aria-controls='navbarSupportedContent'\n          aria-expanded='false'\n          aria-label='Toggle navigation'\n        >\n          <span className='fas fa-bars'></span>\n        </button>\n\n        <div className='collapse navbar-collapse' id='navbarSupportedContent'>\n          <ul className='navbar-nav ml-auto'>\n            <li className='nav-item'>\n              <Link className='nav-link' to='/'>\n                Home <span className='sr-only'>(current)</span>\n              </Link>\n            </li>\n            <li className='nav-item'>\n              <Link className='nav-link' to='/about'>\n                About\n              </Link>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React from 'react';\nimport Home from './components/pages/Home';\nimport About from './components/pages/About';\nimport Navbar from './components/layout/Navbar';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport '@fortawesome/fontawesome-free/js/all.js';\n\nimport 'bootstrap/dist/js/bootstrap';\nimport 'popper.js';\nimport 'jquery';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Router>\n        <Navbar />\n        <Switch>\n          <Route exact path='/' component={Home} />\n          <Route path='/about' component={About} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}